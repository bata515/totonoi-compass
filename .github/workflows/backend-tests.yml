# GitHub Actions ワークフローファイル
# このファイルは、コードがプッシュされたりプルリクエストが作成されたときに
# 自動的にテストを実行するための設定ファイルです

# ワークフローの名前（GitHub上で表示される名前）
name: Backend Tests

# このワークフローがいつ実行されるかを定義
on:
  # プッシュされたときに実行する条件
  push:
    branches:
      - main           # mainブランチにプッシュされたとき
      - 'feature/**'   # feature/で始まるブランチにプッシュされたとき
  
  # プルリクエストが作成・更新されたときに実行する条件
  pull_request:
    branches:
      - main           # mainブランチをターゲットとしたプルリクエスト
      - 'feature/**'   # feature/で始まるブランチをターゲットとしたプルリクエスト

# 実行するジョブ（作業単位）を定義
jobs:
  # テストジョブの定義
  test:
    name: Run Application Service Tests
    
    # どのOS環境で実行するかを指定（Ubuntu最新版を使用）
    runs-on: ubuntu-latest
    
    # ジョブ内で実行する一連のステップ
    steps:
      # ステップ1: ソースコードをチェックアウト（ダウンロード）
      - name: Checkout code
        uses: actions/checkout@v4
        # GitHub上のリポジトリからソースコードを取得します
      
      # ステップ2: Java環境をセットアップ
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'           # Java 21を使用
          distribution: 'temurin'      # Eclipse Temurin（OpenJDK）を使用
        # プロジェクトで使用しているJavaバージョンに合わせて環境を準備します
      
      # ステップ3: Mavenの依存関係をキャッシュ
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2                  # Mavenのローカルリポジトリのパス
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
        # 依存関係をキャッシュすることで、次回実行時の時間を短縮します
      
      # ステップ4: backendディレクトリに移動してテストを実行
      - name: Run application service tests
        run: |
          cd backend
          mvn test -Dtest="com.example.springapp.application.service.*Test"
        # 指定したパッケージ内のテストクラスのみを実行します
        # -Dtestオプションで実行するテストクラスのパターンを指定
      
      # ステップ5: テスト結果をアップロード（テスト失敗時の詳細確認用）
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()  # テストが成功・失敗に関わらず常に実行
        with:
          name: test-results
          path: backend/target/surefire-reports/
        # テストレポートファイルをアーティファクトとして保存し、
        # GitHub上でダウンロードして詳細を確認できるようにします
